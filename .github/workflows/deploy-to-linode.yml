name: Deploy to Linode

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.LINODE_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.LINODE_IP }} >> ~/.ssh/known_hosts

      - name: Copy application files to Linode
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.LINODE_IP }}
          username: ${{ secrets.LINODE_SSH_USER }}
          key: ${{ secrets.LINODE_SSH_KEY }}
          source: ".,!venv,!.git,!__pycache__,!*.pyc"
          target: "/home/${{ secrets.LINODE_SSH_USER }}/zelo_website"
          rm: true
          strip_components: 0
          debug: true

      - name: Setup server and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.LINODE_IP }}
          username: ${{ secrets.LINODE_SSH_USER }}
          key: ${{ secrets.LINODE_SSH_KEY }}
          debug: true
          script: |
            # Install necessary tools first
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S apt-get update
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S apt-get install -y net-tools curl ufw postgresql-client

            # Configure firewall
            echo "Setting up firewall rules..."
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S ufw allow 80/tcp
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S ufw allow 443/tcp
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S ufw --force enable
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S ufw status verbose

            # Move to project directory and setup
            cd /home/${{ secrets.LINODE_SSH_USER }}/zelo_website
            
            # Stop and remove existing containers
            echo "Stopping existing containers..."
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker stop zelo_web_prod zelo_db_prod || true
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker rm zelo_web_prod zelo_db_prod || true
            
            # Clean up Docker system
            echo "Cleaning Docker system..."
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker system prune -f
            
            # Create Docker network
            echo "Creating Docker network..."
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker network create zelo_network || true
            
            # Start PostgreSQL container
            echo "Starting database container..."
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker run -d \
              --name zelo_db_prod \
              --network zelo_network \
              -e POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
              -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
              -e POSTGRES_DB=${{ secrets.POSTGRES_DB }} \
              -v postgres_data:/var/lib/postgresql/data \
              postgres:15
            
            # Wait for database to be ready
            echo "Waiting for database to be ready..."
            for i in {1..30}; do
              if echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker exec -t zelo_db_prod pg_isready -h localhost; then
                echo "Database is ready!"
                break
              fi
              echo "Waiting for database to be ready... attempt $i"
              sleep 2
            done
            
            # Build and start web container
            echo "Building and starting web container..."
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker build -t zelo_web .
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker run -d \
              --name zelo_web_prod \
              --network zelo_network \
              -p 80:5000 \
              -e FLASK_ENV=production \
              -e SECRET_KEY=${{ secrets.SECRET_KEY }} \
              -e DATABASE_URL="postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@zelo_db_prod:5432/${{ secrets.POSTGRES_DB }}" \
              -e POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
              -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
              -e POSTGRES_DB=${{ secrets.POSTGRES_DB }} \
              zelo_web
            
            # Debug: Check container logs
            echo "=== Database Container Logs ==="
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker logs zelo_db_prod
            
            echo "=== Web Container Logs ==="
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker logs zelo_web_prod
            
            # Check container status
            echo "=== Container Status ==="
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker ps -a