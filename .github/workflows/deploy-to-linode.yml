name: Deploy to Linode

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create production env file
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env.prod
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env.prod
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env.prod
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env.prod
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env.prod

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.LINODE_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.LINODE_IP }} >> ~/.ssh/known_hosts

      - name: Copy application files to Linode
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.LINODE_IP }}
          username: ${{ secrets.LINODE_SSH_USER }}
          key: ${{ secrets.LINODE_SSH_KEY }}
          source: ".,!venv,!.git,!__pycache__,!*.pyc"
          target: "/home/${{ secrets.LINODE_SSH_USER }}/zelo_website"
          rm: true
          strip_components: 0
          debug: true

      - name: Setup server and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.LINODE_IP }}
          username: ${{ secrets.LINODE_SSH_USER }}
          key: ${{ secrets.LINODE_SSH_KEY }}
          debug: true
          script: |
            # Install necessary tools first
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S apt-get update
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S apt-get install -y net-tools curl ufw

            # Configure firewall
            echo "Setting up firewall rules..."
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S ufw allow 80/tcp
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S ufw allow 443/tcp
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S ufw --force enable
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S ufw status verbose

            # Move to project directory and setup
            cd /home/${{ secrets.LINODE_SSH_USER }}/zelo_website
            mv .env.prod .env
            
            # Stop and remove existing containers
            echo "Stopping existing containers..."
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker-compose down --remove-orphans || true
            
            # Clean up Docker system
            echo "Cleaning Docker system..."
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker system prune -f
            
            # Build images first to check for build errors
            echo "Building images..."
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker-compose build
            
            # Start database container first
            echo "Starting database container..."
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker-compose up -d db_prod
            
            # Wait for database to be ready
            echo "Waiting for database to be ready..."
            sleep 10
            
            # Check database container status
            echo "=== Database Container Status ==="
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker-compose logs db_prod
            
            # Start web container
            echo "Starting web container..."
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker-compose up -d web_prod
            
            # Follow web container logs in real-time for 30 seconds
            echo "=== Web Container Startup Logs ==="
            timeout 30 echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker-compose logs -f web_prod || true
            
            # Check container status
            echo "=== Container Status ==="
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker-compose ps
            
            # Get web container logs if it failed
            WEB_CONTAINER=$(echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker-compose ps -q web_prod)
            if [ -z "$WEB_CONTAINER" ] || ! echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker inspect "$WEB_CONTAINER" --format '{{.State.Running}}' | grep -q "true"; then
              echo "=== Web Container Failed - Showing Logs ==="
              echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker-compose logs web_prod
              echo "=== Container Exit Code ==="
              echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker inspect "$WEB_CONTAINER" --format '{{.State.ExitCode}}'
              echo "=== Container Error Log ==="
              echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker inspect "$WEB_CONTAINER" --format '{{.State.Error}}'
              exit 1
            fi
            
            # If container is running, check its health
            echo "=== Container Health Check ==="
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker inspect "$WEB_CONTAINER" --format '{{.State.Health}}'
            
            echo "=== Process List Inside Container ==="
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker exec "$WEB_CONTAINER" ps aux || true
            
            echo "=== Testing Application ==="
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker exec "$WEB_CONTAINER" curl -v http://localhost:5000 || true
            
            echo "=== Final Container Status ==="
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker-compose ps