name: Deploy to Linode

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create production env file
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env.prod
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env.prod
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env.prod
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env.prod
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env.prod

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.LINODE_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.LINODE_IP }} >> ~/.ssh/known_hosts

      - name: Copy application files to Linode
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.LINODE_IP }}
          username: ${{ secrets.LINODE_SSH_USER }}
          key: ${{ secrets.LINODE_SSH_KEY }}
          source: ".,!venv,!.git,!__pycache__,!*.pyc"
          target: "/home/${{ secrets.LINODE_SSH_USER }}/zelo_website"
          rm: true
          strip_components: 0
          debug: true

      - name: Setup server and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.LINODE_IP }}
          username: ${{ secrets.LINODE_SSH_USER }}
          key: ${{ secrets.LINODE_SSH_KEY }}
          debug: true
          script: |
            # Install necessary tools first
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S apt-get update
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S apt-get install -y net-tools curl ufw

            # Configure firewall
            echo "Setting up firewall rules..."
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S ufw allow 80/tcp
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S ufw allow 443/tcp
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S ufw --force enable
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S ufw status verbose

            # Move to project directory and setup
            cd /home/${{ secrets.LINODE_SSH_USER }}/zelo_website
            mv .env.prod .env
            
            # Stop and remove existing containers
            echo "Stopping existing containers..."
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker-compose down --remove-orphans || true
            
            # Clean up Docker system
            echo "Cleaning Docker system..."
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker system prune -f
            
            # Start new containers with immediate log checking
            echo "Starting containers..."
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker-compose up --build -d
            
            # Immediate check for container status
            echo "=== Immediate Container Status ==="
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker-compose ps
            
            # Check logs immediately for any startup errors
            echo "=== Initial Container Logs ==="
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker-compose logs
            
            # Wait and check if containers are still running
            echo "Waiting to verify container stability..."
            sleep 5
            
            echo "=== Container Status After Delay ==="
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker-compose ps
            
            # If web container is not running, show recent logs
            if ! echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker-compose ps | grep -q "Up" ; then
              echo "=== Container Failed to Start - Showing Detailed Logs ==="
              echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker-compose logs --tail=100
              echo "=== Failed Container Inspection ==="
              echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker-compose ps -a
              exit 1
            fi
            
            # If containers are running, continue with tests
            echo "=== Docker Containers ==="
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker ps
            
            echo "=== Container Logs ==="
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker-compose logs --tail=50
            
            echo "=== Firewall Status ==="
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S ufw status verbose
            
            echo "=== Port 80 Status ==="
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S netstat -tulpn | grep :80 || true
            
            echo "=== Docker Network Status ==="
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker network ls
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker network inspect zelo_website_flask_prod_network || true
            
            # Only proceed with container tests if the container is running
            WEB_CONTAINER=$(echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker-compose ps -q web_prod)
            if [ ! -z "$WEB_CONTAINER" ]; then
              echo "=== Web Container Details ==="
              echo "Container ID: $WEB_CONTAINER"
              echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker inspect $WEB_CONTAINER
              
              echo "=== Testing Local Connection from inside container ==="
              echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker exec $WEB_CONTAINER curl -v http://localhost:5000 || true
              
              echo "=== Process List Inside Container ==="
              echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker exec $WEB_CONTAINER ps aux || true
              
              echo "=== Network Inside Container ==="
              echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S docker exec $WEB_CONTAINER netstat -tulpn || true
            else
              echo "Web container is not running - skipping container tests"
              exit 1
            fi